* Chapter 3. Going Further
  The preceding chapter prepared you to write Scheme programs using a small set of the most useful primitive syntactic
  forms and procedures. This chapter introduces a number of additional features and programming techniques that will
  allow you to write more sophisticated and efficient programs.

** Section 3.1. Syntactic Extension
   As we saw in Section 2.5, the let syntactic form is merely a syntactic extension defined in terms of a lambda
   expression and a procedure application, both core syntactic forms. At this point, you might be wondering which
   syntactic forms are core forms and which are syntactic extensions, and how new syntactic extensions may be
   defined. This section provides some answers to these questions.

   In truth, it is not necessary for us to draw a distinction between core forms and syntactic extensions, since once
   defined, a syntactic extension has exactly the same status as a core form. Drawing a distinction, however, makes
   understanding the language easier, since it allows us to focus attention on the core forms and to understand all
   others in terms of them.

   It is necessary for a Scheme implementation to distinguish between core forms and syntactic extensions. A Scheme
   implementation expands syntactic extensions into core forms as the first step of compilation or interpretation,
   allowing the rest of the compiler or interpreter to focus only on the core forms. The set of core forms remaining
   after expansion to be handled directly by the compiler or interpreter is implementation-dependent, however, and may
   be different from the set of forms described as core here.

   The exact set of syntactic forms making up the core of the language is thus subject to debate, although it must be
   possible to derive all other forms from any set of forms declared to be core forms. The set described here is among
   the simplest for which this constraint is satisfied.

   The core syntactic forms include top-level define forms, constants, variables, procedure applications, quote
   expressions, lambda expressions, if expressions, and set! expressions. The grammar below describes the core syntax of
   Scheme in terms of these definitions and expressions. In the grammar, vertical bars ( | ) separate alternatives, and a
   form followed by an asterisk ( * ) represents zero or more occurrences of the form. <variable> is any Scheme
   identifier. <datum> is any Scheme object, such as a number, list, symbol, or vector. <boolean> is either #t or #f,
   <number> is any number, <character> is any character, and <string> is any string. We have already seen examples of
   numbers, strings, lists, symbols, and booleans. See Chapter 6 or the formal syntax description starting on page 455 for
   more on the object-level syntax of these and other objects.

#+BEGIN_EXAMPLE
   <program>             → <form>*
   <form>                → <definition> | <expression>
   <definition>          → <variable definition> | (begin <definition>*)
   <variable definition> → (define <variable> <expression>)
   <expression>          → <constant>
                         | <variable>
                         | (quote <datum>)
                         | (lambda <formals> <expression> <expression>*)
                         | (if <expression> <expression> <expression>)
                         | (set! <variable> <expression>)
                         | <application>
   <constant>            → <boolean> | <number> | <character> | <string>
   <formals>             → <variable>
                         | (<variable>*)
                         | (<variable> <variable>* . <variable>)
   <application>         → (<expression> <expression>*)
#+END_EXAMPLE

   The grammar is ambiguous in that the syntax for procedure applications conflicts with the syntaxes for quote, lambda,
   if, and set! expressions. In order to qualify as a procedure application, the first <expression> must not be one of
   these keywords, unless the keyword has been redefined or locally bound.

   The "defun" syntax for define given in Section 2.6 is not included in the core, since definitions in that form are
   straightforwardly translated into the simpler define syntax. Similarly, the core syntax for if does not permit the
   alternative to be omitted, as did one example in Section 2.9. An if expression lacking an alternative can be
   translated into the core syntax for if merely by replacing the missing subexpression with an arbitrary constant, such
   as #f.

   A begin that contains only definitions is considered to be a definition in the grammar; this is permitted in order to
   allow syntactic extensions to expand into more than one definition. begin expressions, i.e., begin forms containing
   expressions, are not considered core forms. A begin expression of the form

#+begin_src scheme
   (begin e1 e2 ...)
#+end_src

   is equivalent to the lambda application

#+begin_src scheme
   ((lambda () e1 e2 ...))
#+end_src

   and hence need not be considered core.

   Now that we have established a set of core syntactic forms, let's turn to a discussion of syntactic
   extensions. Syntactic extensions are so called because they extend the syntax of Scheme beyond the core syntax. All
   syntactic extensions in a Scheme program must ultimately be derived from the core forms. One syntactic extension,
   however, may be defined in terms of another syntactic extension, as long as the latter is in some sense "closer" to
   the core syntax. Syntactic forms may appear anywhere an expression or definition is expected, as long as the extended
   form expands into a definition or expression as appropriate.

   Syntactic extensions are defined with define-syntax. define-syntax is similar to define, except that define-syntax
   associates a syntactic transformation procedure, or transformer, with a keyword (such as let), rather than
   associating a value with a variable. Here is how we might define let with define-syntax.

#+begin_src scheme
   (define-syntax let
     (syntax-rules ()
       [(_ ((x e) ...) b1 b2 ...)
        ((lambda (x ...) b1 b2 ...) e ...)]))
#+end_src

   The identifier appearing after define-syntax is the name, or keyword, of the syntactic extension being defined, in
   this case let. The syntax-rules form is an expression that evaluates to a transformer. The item following
   syntax-rules is a list of auxiliary keywords and is nearly always (). An example of an auxiliary keyword is the else
   of cond. (Other examples requiring the use of auxiliary keywords are given in Chapter 8.) Following the list of
   auxiliary keywords is a sequence of one or more rules, or pattern/template pairs. Only one rule appears in our
   definition of let. The pattern part of a rule specifies the form that the input must take, and the template specifies
   to what the input should be transformed.

   The pattern should always be a structured expression whose first element is an underscore ( _ ). (As we will see in
   Chapter 8, the use of _ is only a convention, but it is a good one to follow.) If more than one rule is present, the
   appropriate one is chosen by matching the patterns, in order, against the input during expansion. It is a syntax
   violation if none of the patterns match the input.

   Identifiers other than an underscore or ellipsis appearing within a pattern are pattern variables, unless they are
   listed as auxiliary keywords. Pattern variables match any substructure and are bound to that substructure within the
   corresponding template. The notation pat ... in the pattern allows for zero or more expressions matching the ellipsis
   prototype pat in the input. Similarly, the notation expr ... in the template produces zero or more expressions from
   the ellipsis prototype expr in the output. The number of pats in the input determines the number of exprs in the
   output; in order for this to work, any ellipsis prototype in the template must contain at least one pattern variable
   from an ellipsis prototype in the pattern.

   The single rule in our definition of let should be fairly self-explanatory, but a few points are worth
   mentioning. First, the syntax of let requires that the body contain at least one form; hence, we have specified b1 b2
   ... instead of b ..., which might seem more natural. On the other hand, let does not require that there be at least
   one variable/value pair, so we were able to use, simply, (x e) .... Second, the pattern variables x and e, though
   together within the same prototype in the pattern, are separated in the template; any sort of rearrangement or
   recombination is possible. Finally, the three pattern variables x, e, and b2 that appear in ellipsis prototypes in
   the pattern also appear in ellipsis prototypes in the template. This is not a coincidence; it is a requirement. In
   general, if a pattern variable appears within an ellipsis prototype in the pattern, it cannot appear outside an
   ellipsis prototype in the template.

   The definition of and below is somewhat more complex than the one for ~let~.

#+begin_src scheme
   (define-syntax and
     (syntax-rules ()
       [(_) #t]
       [(_ e) e]
       [(_ e1 e2 e3 ...)
        (if e1 (and e2 e3 ...) #f)]))
#+end_src

   This definition is recursive and involves more than one rule. Recall that (and) evaluates to #t; the first rule takes
   care of this case. The second and third rules specify the base case and recursion steps of the recursion and together
   translate and expressions with two or more subexpressions into nested if expressions. For example, (and a b c)
   expands first into

#+begin_src scheme
   (if a (and b c) #f)
#+end_src

   then

#+begin_src scheme
   (if a (if b (and c) #f) #f)
#+end_src

   and finally

#+begin_src scheme
   (if a (if b c #f) #f)
#+end_src

   With this expansion, if a and b evaluate to a true value, then the value is the value of c, otherwise #f, as desired.

   The version of and below is simpler but, unfortunately, incorrect.

#+begin_src scheme
   (define-syntax and ; incorrect!
     (syntax-rules ()
       [(_) #t]
       [(_ e1 e2 ...)
        (if e1 (and e2 ...) #f)]))
#+end_src

   The expression

#+begin_src scheme
   (and (not (= x 0)) (/ 1 x))
#+end_src

   should return the value of (/ 1 x) when x is not zero. With the incorrect version of and, the expression expands as
   follows.

#+begin_src scheme
   (if (not (= x 0)) (and (/ 1 x)) #f) →
   (if (not (= x 0)) (if (/ 1 x) (and) #f) #f) →
   (if (not (= x 0)) (if (/ 1 x) #t #f) #f)
#+end_src

   The final answer if x is not zero is #t, not the value of (/ 1 x).

   The definition of or below is similar to the one for and except that a temporary variable must be introduced for each
   intermediate value so that we can both test the value and return it if it is a true value. (A temporary variable is not
   needed for and since there is only one false value, #f.)

#+begin_src scheme
   (define-syntax or
     (syntax-rules ()
       [(_) #f]
       [(_ e) e]
       [(_ e1 e2 e3 ...)
        (let ([t e1])
          (if t t (or e2 e3 ...)))]))
#+end_src

   Like variables bound by lambda or let, identifiers introduced by a template are lexically scoped, i.e., visible only
   within expressions introduced by the template. Thus, even if one of the expressions e2 e3 ... contains a reference to
   t, the introduced binding for t does not "capture" those references. This is typically accomplished via automatic
   renaming of introduced identifiers.

   As with the simpler version of and given above, the simpler version of or below is incorrect.

#+begin_src scheme
   (define-syntax or ; incorrect!
     (syntax-rules ()
       [(_) #f]
       [(_ e1 e2 ...)
        (let ([t e1])
          (if t t (or e2 ...)))]))
#+end_src

   The reason is more subtle, however, and is the subject of Exercise 3.2.6.

*** Exercise 3.1.1

    Write out the expansion steps necessary to expand

#+begin_src scheme
    (let ([x (memv 'a ls)])
      (and x (memv 'b x)))
#+end_src

   into core forms.

*** Exercise 3.1.2

    Write out the expansion steps necessary to expand

#+begin_src scheme
    (or (memv x '(a b c)) (list x))
#+end_src

    into core forms.

*** Exercise 3.1.3

    ~let*~ is similar to let but evaluates its bindings in sequence. Each of the right-hand-side expressions is within
    the scope of the earlier bindings.

#+begin_src scheme
    (let* ([a 5] [b (+ a a)] [c (+ a b)])
      (list a b c)) → (5 10 15)
#+end_src

    ~let*~ can be implemented as nested let expressions. For example, the ~let*~ expression above is equivalent to the
    nested let expressions below.

#+begin_src scheme
    (let ([a 5])
      (let ([b (+ a a)])
        (let ([c (+ a b)])
          (list a b c)))) → (5 10 15)
#+end_src

    Define ~let*~ with define-syntax.

*** Exercise 3.1.4

    As we saw in Section 2.9, it is legal to omit the third, or alternative, subexpression of an if expression. Doing
    so, however, often leads to confusion. Scheme provides two syntactic forms, when and unless, that may be used in
    place of such "one-armed" if expressions.

#+begin_src scheme
    (when test expr1 expr2 ...)
    (unless test expr1 expr2 ...)
#+end_src

    With both forms, test is evaluated first. For when, if test evaluates to true, the remaining forms are evaluated in
    sequence as if enclosed in an implicit begin expression. If test evaluates to false, the remaining forms are not
    evaluated, and the result is unspecified. unless is similar except that the remaining forms are evaluated only if
    test evaluates to false.

#+begin_src scheme
    (let ([x 3])
      (unless (= x 0) (set! x (+ x 1)))
      (when (= x 4) (set! x (* x 2)))
      x) → 8
#+end_src

    Define when as a syntactic extension in terms of if and begin, and define unless in terms of when.

** Section 3.2. More Recursion
   In Section 2.8, we saw how to define recursive procedures using top-level definitions. Before that, we saw how to
   create local bindings for procedures using let. It is natural to wonder whether a let-bound procedure can be
   recursive. The answer is no, at least not in a straightforward way. If you try to evaluate the expression

#+begin_src scheme
   (let ([sum (lambda (ls)
                (if (null? ls)
                    0
                    (+ (car ls) (sum (cdr ls)))))])
     (sum '(1 2 3 4 5)))
#+end_src

   it will probably raise an exception with a message to the effect that sum is undefined. This is because the variable
   sum is visible only within the body of the let expression and not within the lambda expression whose value is bound
   to sum. We can get around this problem by passing the procedure sum to itself as follows.

#+begin_src scheme
   (let ([sum (lambda (sum ls)
                (if (null? ls)
                    0
                    (+ (car ls) (sum sum (cdr ls)))))])
     (sum sum '(1 2 3 4 5))) → 15
#+end_src

   This works and is a clever solution, but there is an easier way, using letrec. Like let, the letrec syntactic form
   includes a set of variable-value pairs, along with a sequence of expressions referred to as the body of the letrec.

#+begin_src scheme
   (letrec ((var expr) ...) body1 body2 ...)
#+end_src

   Unlike let, the variables var ... are visible not only within the body of the letrec but also within expr .... Thus,
   we can rewrite the expression above as follows.

#+begin_src scheme
   (letrec ([sum (lambda (ls)
                   (if (null? ls)
                       0
                       (+ (car ls) (sum (cdr ls)))))])
     (sum '(1 2 3 4 5))) → 15
#+end_src

   Using ~letrec~, we can also define mutually recursive procedures, such as the procedures ~even?~ and ~odd?~ that were
   the subject of Exercise 2.8.6.

#+begin_src scheme
   (letrec ([even?
             (lambda (x)
               (or (= x 0)
                   (odd? (- x 1))))]
            [odd?
             (lambda (x)
               (and (not (= x 0))
                    (even? (- x 1))))])
     (list (even? 20) (odd? 20))) → (#t #f)
#+end_src

   In a letrec expression, expr ... are most often lambda expressions, though this need not be the case. One restriction
   on the expressions must be obeyed, however. It must be possible to evaluate each expr without evaluating any of the
   variables var .... This restriction is always satisfied if the expressions are all lambda expressions, since even
   though the variables may appear within the lambda expressions, they cannot be evaluated until the resulting
   procedures are invoked in the body of the letrec. The following letrec expression obeys this restriction.

#+begin_src scheme
   (letrec ([f (lambda () (+ x 2))]
            [x 1])
     (f)) → 3
#+end_src

   while the following does not.

#+begin_src scheme
   (letrec ([y (+ x 2)]
            [x 1])
     y)
#+end_src

   In this case, an exception is raised indicating that x is not defined where it is referenced.

   We can use letrec to hide the definitions of "help" procedures so that they do not clutter the top-level
   namespace. This is demonstrated by the definition of list? below, which follows the "hare and tortoise" algorithm
   outlined in Exercise 2.9.8.

#+begin_src scheme
   (define list?
     (lambda (x)
       (letrec ([race
                 (lambda (h t)
                   (if (pair? h)
                       (let ([h (cdr h)])
                         (if (pair? h)
                             (and (not (eq? h t))
                                  (race (cdr h) (cdr t)))
                             (null? h)))
                       (null? h)))])
         (race x x))))
#+end_src

   When a recursive procedure is called in only one place outside the procedure, as in the example above, it is often
   clearer to use a named let expression. Named let expressions take the following form.

#+begin_src scheme
   (let name ((var expr) ...)
     body1 body2 ...)
#+end_src

   Named let is similar to unnamed let in that it binds the variables var ... to the values of expr ... within the body
   body1 body2 .... As with unnamed let, the variables are visible only within the body and not within expr .... In
   addition, the variable name is bound within the body to a procedure that may be called to recur; the arguments to the
   procedure become the new values for the variables var ....

   The definition of ~list?~ has been rewritten below to use named ~let~.

#+begin_src scheme
   (define list?
     (lambda (x)
       (let race ([h x] [t x])
         (if (pair? h)
             (let ([h (cdr h)])
               (if (pair? h)
                   (and (not (eq? h t))
                        (race (cdr h) (cdr t)))
                   (null? h)))
             (null? h)))))
#+end_src

   Just as let can be expressed as a simple direct application of a lambda expression to arguments, named let can be
   expressed as the application of a recursive procedure to arguments. A named let of the form

#+begin_src scheme
   (let name ((var expr) ...)
     body1 body2 ...)
#+end_src

   can be rewritten in terms of letrec as follows.

#+begin_src scheme
   ((letrec ((name (lambda (var ...) body1 body2 ...)))
      name)
    expr ...)
#+end_src

   Alternatively, it can be rewritten as

#+begin_src scheme
   (letrec ((name (lambda (var ...) body1 body2 ...)))
     (name expr ...))
#+end_src

   provided that the variable name does not appear free within expr ....

   As we discussed in Section 2.8, some recursion is essentially iteration and executes as such. When a procedure call
   is in tail position (see below) with respect to a lambda expression, it is considered to be a tail call, and Scheme
   systems must treat it properly, as a "goto" or jump. When a procedure tail-calls itself or calls itself indirectly
   through a series of tail calls, the result is tail recursion. Because tail calls are treated as jumps, tail recursion
   can be used for indefinite iteration in place of the more restrictive iteration constructs provided by other
   programming languages, without fear of overflowing any sort of recursion stack.

   A call is in tail position with respect to a lambda expression if its value is returned directly from the lambda
   expression, i.e., if nothing is left to do after the call but to return from the lambda expression. For example, a
   call is in tail position if it is the last expression in the body of a lambda expression, the consequent or
   alternative part of an if expression in tail position, the last subexpression of an and or or expression in tail
   position, the last expression in the body of a let or letrec in tail position, etc. Each of the calls to f in the
   expressions below are tail calls, but the calls to g are not.

#+begin_src scheme
   (lambda () (f (g)))
   (lambda () (if (g) (f) (f)))
   (lambda () (let ([x 4]) (f)))
   (lambda () (or (g) (f)))
#+end_src

   In each case, the values of the calls to f are returned directly, whereas the calls to g are not.

   Recursion in general and named let in particular provide a natural way to implement many algorithms, whether
   iterative, recursive, or partly iterative and partly recursive; the programmer is not burdened with two distinct
   mechanisms.

   The following two definitions of factorial use named let expressions to compute the factorial, n!, of a nonnegative
   integer n. The first employs the recursive definition n! = n × (n - 1)!, where 0! is defined to be 1.

#+begin_src scheme
   (define factorial
     (lambda (n)
       (let fact ([i n])
         (if (= i 0)
             1
             (* i (fact (- i 1)))))))
#+end_src

#+begin_src scheme
   (factorial 0) → 1
   (factorial 1) → 1
   (factorial 2) → 2
   (factorial 3) → 6
   (factorial 10) → 3628800
#+end_src

   The second is an iterative version that employs the iterative definition ~n! = n × (n - 1) × (n - 2) × ... × 1~,
   using an accumulator, a, to hold the intermediate products.

#+begin_src scheme
   (define factorial
     (lambda (n)
       (let fact ([i n] [a 1])
         (if (= i 0)
             a
             (fact (- i 1) (* a i))))))
#+end_src

   A similar problem is to compute the nth Fibonacci number for a given n. The Fibonacci numbers are an infinite
   sequence of integers, 0, 1, 1, 2, 3, 5, 8, etc., in which each number is the sum of the two preceding numbers in the
   sequence. A procedure to compute the nth Fibonacci number is most naturally defined recursively as follows.

#+begin_src scheme
   (define fibonacci
     (lambda (n)
       (let fib ([i n])
         (cond
           [(= i 0) 0]
           [(= i 1) 1]
           [else (+ (fib (- i 1)) (fib (- i 2)))]))))
#+end_src

#+begin_src scheme
   (fibonacci 0) → 0
   (fibonacci 1) → 1
   (fibonacci 2) → 1
   (fibonacci 3) → 2
   (fibonacci 4) → 3
   (fibonacci 5) → 5
   (fibonacci 6) → 8
   (fibonacci 20) → 6765
   (fibonacci 30) → 832040
#+end_src

   This solution requires the computation of the two preceding Fibonacci numbers at each step and hence is doubly
   recursive. For example, to compute (fibonacci 4) requires the computation of both (fib 3) and (fib 2), to compute
   (fib 3) requires computing both (fib 2) and (fib 1), and to compute (fib 2) requires computing both (fib 1) and (fib
   0). This is very inefficient, and it becomes more inefficient as n grows. A more efficient solution is to adapt the
   accumulator solution of the factorial example above to use two accumulators, a1 for the current Fibonacci number and
   a2 for the preceding one.

#+begin_src scheme
   (define fibonacci
     (lambda (n)
       (if (= n 0)
           0
           (let fib ([i n] [a1 1] [a2 0])
             (if (= i 1)
                 a1
                 (fib (- i 1) (+ a1 a2) a1))))))
#+end_src

   Here, zero is treated as a special case, since there is no preceding value. This allows us to use the single base
   case (= i 1). The time it takes to compute the nth Fibonacci number using this iterative solution grows linearly with
   n, which makes a significant difference when compared to the doubly recursive version. To get a feel for the
   difference, try computing (fibonacci 35) and (fibonacci 40) using both definitions to see how long each takes.

   We can also get a feel for the difference by looking at a trace for each on small inputs. The first trace below shows
   the calls to fib in the non-tail-recursive version of fibonacci, with input 5.

#+BEGIN_EXAMPLE
   |(fib 5)
   | (fib 4)
   | |(fib 3)
   | | (fib 2)
   | | |(fib 1)
   | | |1
   | | |(fib 0)
   | | |0
   | | 1
   | | (fib 1)
   | | 1
   | |2
   | |(fib 2)
   | | (fib 1)
   | | 1
   | | (fib 0)
   | | 0
   | |1
   | 3
   | (fib 3)
   | |(fib 2)
   | | (fib 1)
   | | 1
   | | (fib 0)
   | | 0
   | |1
   | |(fib 1)
   | |1
   | 2
   |5
#+END_EXAMPLE

   Notice how there are several calls to fib with arguments 2, 1, and 0. The second trace shows the calls to fib in the
   tail-recursive version, again with input 5.

#+BEGIN_EXAMPLE
   |(fib 5 1 0)
   |(fib 4 1 1)
   |(fib 3 2 1)
   |(fib 2 3 2)
   |(fib 1 5 3)
   |5
#+END_EXAMPLE

   Clearly, there is quite a difference.

   The named let examples shown so far are either tail-recursive or not tail-recursive. It often happens that one
   recursive call within the same expression is tail-recursive while another is not. The definition of factor below
   computes the prime factors of its nonnegative integer argument. The first call to f is not tail-recursive, but the
   second one is.

#+begin_src scheme
   (define factor
     (lambda (n)
       (let f ([n n] [i 2])
         (cond
           [(>= i n) (list n)]
           [(integer? (/ n i))
            (cons i (f (/ n i) i))]
           [else (f n (+ i 1))]))))
#+end_src

#+begin_src scheme
   (factor 0) → (0)
   (factor 1) → (1)
   (factor 12) → (2 2 3)
   (factor 3628800) → (2 2 2 2 2 2 2 2 3 3 3 3 5 5 7)
   (factor 9239) → (9239)
#+end_src

   A trace of the calls to f, produced in Chez Scheme by replacing let with trace-let, in the evaluation of (factor 120)
   below highlights the difference between the nontail calls and the tail calls.

#+BEGIN_EXAMPLE
   |(f 120 2)
   | (f 60 2)
   | |(f 30 2)
   | | (f 15 2)
   | | (f 15 3)
   | | |(f 5 3)
   | | |(f 5 4)
   | | |(f 5 5)
   | | |(5)
   | | (3 5)
   | |(2 3 5)
   | (2 2 3 5)
   |(2 2 2 3 5)
#+END_EXAMPLE

   A nontail call to f is shown indented relative to its caller, since the caller is still active, whereas tail calls
   appear at the same level of indentation.

*** Exercise 3.2.1

    Which of the recursive procedures defined in Section 3.2 are tail-recursive, and which are not?

*** Exercise 3.2.2

    Rewrite factor using letrec to bind f in place of named let. Which version do you prefer?

*** Exercise 3.2.3

    Can the letrec expression below be rewritten using named let? If not, why not? If so, do it.

#+begin_src scheme
    (letrec ([even?
              (lambda (x)
                (or (= x 0)
                    (odd? (- x 1))))]
             [odd?
              (lambda (x)
                (and (not (= x 0))
                     (even? (- x 1))))])
      (even? 20))
#+end_src

*** Exercise 3.2.4

    Rewrite both definitions of fibonacci given in this section to count the number of recursive calls to fib, using a
    counter similar to the one used in the cons-count example of Section 2.9. Count the number of recursive calls made in
    each case for several input values. What do you notice?

*** Exercise 3.2.5

    Augment the definition of let given in Section 3.1 to handle named let as well as unnamed let, using two rules.

*** Exercise 3.2.6

    The following definition of or is simpler than the one given in Section 3.1.

#+begin_src scheme
    (define-syntax or ; incorrect!
      (syntax-rules ()
        [(_) #f]
        [(_ e1 e2 ...)
         (let ([t e1])
           (if t t (or e2 ...)))]))
#+end_src

    Say why it is not correct. [Hint: Think about what would happen if this version of or were used in the even? and
    odd? example given on page 66 for very large inputs.]

*** Exercise 3.2.7

    The definition of factor is not the most efficient possible. First, no factors of n besides n itself can possibly be
    found beyond →. Second, the division (/ n i) is performed twice when a factor is found. Third, after 2, no even
    factors can possibly be found. Recode factor to correct all three problems. Which is the most important problem to
    solve? Are there any additional improvements you can make?

** Section 3.3. Continuations
** Section 3.4. Continuation Passing Style
** Section 3.5. Internal Definitions
** Section 3.6. Libraries


#+begin_src scheme

#+end_src

#+BEGIN_EXAMPLE

#+END_EXAMPLE

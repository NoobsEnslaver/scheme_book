;;; -*- coding: utf-8; tab-width: 4; c-basic-offset: 2; indent-tabs-mode: nil; -*-
(use-modules (skribilo engine)
             (skribilo package polyglossia-russian)
             (skribilo package minted)
             (skribilo writer)
             (ice-9 string-fun))

;; TODO: вынести
(define* (src-lite :key line inline . body)
  (prog :line line :inline inline
        (source :language scheme body)))

(define* (src-inline :key line . body)
  (prog :line line :inline #t
        (source :language scheme body)))

(define* (src . body)
  (frame :width 100.0 :margin 0 :minted-frame-type 'leftline
         (src-lite :line #t body)))

(define (code . body)
  (src-lite :inline #t body))

(define* (include-src path
                      :optional (from #f)
                                (to* #f)
                      :key (definition #f))
  (let ((to (cond
             (to* to*)
             ((string? from) (string-replace-substring from "#|+" "#|-"))
             (else from))))
    (frame :width 100.0 :minted-frame-type 'leftline
           (prog :line #t
            (source :language scheme :file path :start from :stop to :definition definition)))))

(define (chapter-image path)
    (flush :side 'left (image :file path :width 25.0)))

(define *forms* (make-index "List of forms"))

(define* (formdef :key (syntax '()) (returns '()) (libraries '()))
  (flush :side 'left
    (map (lambda (s)
          (index :index *forms* :shape (code s) s))
        (if (list? syntax) syntax (list syntax)))
    (color :bg "#eeeeee"
     (frame :border 0
      (table
       (append
        (map (lambda (s)
               (tr
                (td :align 'left "синтаксис:")
                (td :align 'left (code s))))
             (if (list? syntax) syntax (list syntax)))
        (map (lambda (r)
               (tr
                (td :align 'left "возвращает:")
                (td :align 'left r)))
             (if (list? returns) returns (list returns)))
        (map (lambda (l)
               (tr
                (td :align 'left "библиотеки:")
                (td :align 'left l)))
             (if (list? libraries) libraries (list libraries)))))))))

;; Конфигурируем ядро latex
(let ((le (find-engine 'latex)))
  (define (opt-append key val)
    (if (string? (engine-custom le key))
        (engine-custom-set! le key (string-append "\n" val (engine-custom le key) "\n"))
        (engine-custom-set! le key val)))

    (engine-custom-set! le 'class-has-chapters? #t)
    (engine-custom-set! le 'image-engine 'graphicx)
    (engine-custom-set! le 'toc-depth 'section)
    (engine-custom-set! le 'toc-depth 'section)
    (engine-custom-set! le 'documentclass "\\documentclass[12pt,fleqn,oneside]{book}\n")
    (opt-append 'usepackage "\\usepackage[margin=0.8in]{geometry}")
    (opt-append 'predocument "\\usemintedstyle{default}
\\hypersetup{
colorlinks=true,
linkcolor=blue,
pdfhighlight=/I,
pdfborder={0 0 0}
}
\\makeatletter
\\AtBeginEnvironment{minted}{\\dontdofcolorbox}
\\def\\dontdofcolorbox{\\renewcommand\\fcolorbox[4][]{##4}}
\\xpatchcmd{\\inputminted}{\\minted@fvset}{\\minted@fvset\\dontdofcolorbox}{}{}
\\xpatchcmd{\\mintinline}{\\minted@fvset}{\\minted@fvset\\dontdofcolorbox}{}{}
\\makeatother
\\setminted[scheme]{
    breaklines=true,
    encoding=utf8,
    fontsize=\\footnotesize}
"))


;; Конфигурируем ядро html
(let ((he (find-engine 'html)))
   (engine-custom-set! he 'charset "UTF-8"))

(bibliography "src/bibliography.sbib")

(document
   :title "Язык программирования Scheme, 4-е издание"
   :html-title "Язык программирования Scheme, 4-е издание"
   :author "R. Kent Dybvig"
   :keywords '("Scheme" "язык программирования")
   (p (image :file "images/cover.png" :width 100.0))
   (toc :chapter #t :section #t :subsection #f)

   (include "src/chapters/0.preface.skb")
   (include "src/chapters/1.introduction.skb")
   (include "src/chapters/2.getting_started.skb")
   (include "src/chapters/3.going_further.skb")
   (include "src/chapters/4.procedures_and_variable_bindings.skb")
   (include "src/chapters/5.control_operations.skb")
   (include "src/chapters/6.operations_on_objects.skb")
   (include "src/chapters/7.input_and_output.skb")
   (include "src/chapters/8.syntactic_extension.skb")
   (include "src/chapters/9.records.skb")
   (include "src/chapters/10.libraries_and_top-level_programs.skb")
   (include "src/chapters/11.exceptions_and_conditions.skb")
   (include "src/chapters/12.extended_examples.skb")
   (include "src/chapters/13.references.skb")
   (include "src/chapters/14.answers_to_selected_exercises.skb")
   (include "src/chapters/15.formal_syntax.skb")
   (include "src/chapters/16.summary_of_forms.skb"))
